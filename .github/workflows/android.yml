name: Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Generate Version Info
      id: version
      run: |
        # 获取当前时间作为版本号
        BUILD_TIME=$(date +"%Y%m%d%H%M%S")
        BUILD_DATE=$(date +"%Y-%m-%d %H:%M:%S")
        
        # 获取Git信息
        GIT_COMMIT=$(git rev-parse --short HEAD)
        GIT_BRANCH=$(git branch --show-current)
        
        # 读取当前版本信息
        if [ -f "VERSION.md" ]; then
          CURRENT_VERSION=$(grep "版本号" VERSION.md | sed 's/.*: //' | sed 's/\*//g' | tr -d ' ' | head -1)
          CURRENT_CODE=$(grep "版本代码" VERSION.md | sed 's/.*: //' | sed 's/\*//g' | tr -d ' ' | head -1)
        else
          CURRENT_VERSION="1.0.0"
          CURRENT_CODE="1"
        fi
        
        # 验证版本号格式
        if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "警告: 版本号格式不正确，使用默认值"
          CURRENT_VERSION="1.0.0"
        fi
        
        # 验证版本代码格式
        if [[ ! "$CURRENT_CODE" =~ ^[0-9]+$ ]]; then
          echo "警告: 版本代码格式不正确，使用默认值"
          CURRENT_CODE="1"
        fi
        
        # 递增版本代码
        NEW_CODE=$((CURRENT_CODE + 1))
        
        # 生成版本名称
        VERSION_NAME="${CURRENT_VERSION}-build.${BUILD_TIME}"
        VERSION_CODE=$NEW_CODE
        
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_OUTPUT
        echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_OUTPUT
        
        echo "Generated version info:"
        echo "Current Version: $CURRENT_VERSION"
        echo "Current Code: $CURRENT_CODE"
        echo "New Version Name: $VERSION_NAME"
        echo "New Version Code: $VERSION_CODE"
        echo "Build Date: $BUILD_DATE"
        echo "Git Commit: $GIT_COMMIT"
        echo "Git Branch: $GIT_BRANCH"

    - name: Update Version in build.gradle
      run: |
        # 更新app/build.gradle中的版本信息
        echo "Current version info:"
        grep -E "(versionName|versionCode)" app/build.gradle
        
        # 使用更安全的sed命令
        sed -i "s/versionName \"[^\"]*\"/versionName \"${{ steps.version.outputs.VERSION_NAME }}\"/" app/build.gradle
        sed -i "s/versionCode [0-9]*/versionCode ${{ steps.version.outputs.VERSION_CODE }}/" app/build.gradle
        
        echo "Updated version info:"
        grep -E "(versionName|versionCode)" app/build.gradle
        
        # 验证文件内容
        echo "Build.gradle content around version lines:"
        grep -A 2 -B 2 -E "(versionName|versionCode)" app/build.gradle
        
        # 显示完整的版本信息用于调试
        echo "=== 版本信息调试 ==="
        echo "VERSION_NAME: ${{ steps.version.outputs.VERSION_NAME }}"
        echo "VERSION_CODE: ${{ steps.version.outputs.VERSION_CODE }}"
        echo "BUILD_DATE: ${{ steps.version.outputs.BUILD_DATE }}"
        echo "GIT_COMMIT: ${{ steps.version.outputs.GIT_COMMIT }}"
        
        # 验证版本代码是否在合理范围内
        VERSION_CODE=${{ steps.version.outputs.VERSION_CODE }}
        if [ "$VERSION_CODE" -lt 1 ] || [ "$VERSION_CODE" -gt 1000000 ]; then
            echo "警告: 版本代码 $VERSION_CODE 可能不在合理范围内"
        else
            echo "版本代码 $VERSION_CODE 在合理范围内"
        fi

    - name: Update Version Document
      run: |
        # 更新VERSION.md文档
        BUILD_DATE=$(date +"%Y-%m-%d")
        GIT_COMMIT=${{ steps.version.outputs.GIT_COMMIT }}
        VERSION_NAME=${{ steps.version.outputs.VERSION_NAME }}
        VERSION_CODE=${{ steps.version.outputs.VERSION_CODE }}
        
        # 创建新的版本记录
        echo "# GPS Tracker 版本记录" > VERSION.md
        echo "" >> VERSION.md
        echo "## 当前版本" >> VERSION.md
        echo "- **版本号**: $VERSION_NAME" >> VERSION.md
        echo "- **版本代码**: $VERSION_CODE" >> VERSION.md
        echo "- **构建日期**: $BUILD_DATE" >> VERSION.md
        echo "- **Git提交**: $GIT_COMMIT" >> VERSION.md
        echo "" >> VERSION.md
        echo "## 版本历史" >> VERSION.md
        echo "" >> VERSION.md
        echo "### $VERSION_NAME ($BUILD_DATE)" >> VERSION.md
        echo "- 自动构建版本" >> VERSION.md
        echo "- Git提交: $GIT_COMMIT" >> VERSION.md
        echo "- 版本代码: $VERSION_CODE" >> VERSION.md
        
        echo "版本文档已更新"
        cat VERSION.md

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Validate build.gradle
      run: |
        # 验证build.gradle文件格式
        echo "Validating build.gradle file..."
        if grep -q "versionName" app/build.gradle && grep -q "versionCode" app/build.gradle; then
          echo "Build.gradle validation passed"
        else
          echo "Build.gradle validation failed - missing version info"
          exit 1
        fi

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test

    - name: Setup Signing
      run: |
        # 创建签名配置
        echo "=== 设置签名配置 ==="
        
        # 创建Android默认debug keystore
        mkdir -p ~/.android
        keytool -genkey -v -keystore ~/.android/debug.keystore -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Android Debug,O=Android,C=US"
        
        echo "Debug keystore created successfully"
        ls -la ~/.android/debug.keystore

    - name: Build APK
      run: ./gradlew assembleDebug

    - name: Verify APK Version
      run: |
        echo "=== 验证APK版本信息 ==="
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "APK文件存在"
          # 使用aapt工具获取APK信息
          aapt dump badging app/build/outputs/apk/debug/app-debug.apk | grep -E "(package|versionCode|versionName)" || echo "无法获取APK版本信息"
        else
          echo "APK文件不存在"
        fi

    - name: Upload Debug APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: gps-tracker-debug-${{ steps.version.outputs.VERSION_CODE }}.apk
        path: app/build/outputs/apk/debug/app-debug.apk

    - name: Build Release APK
      run: ./gradlew assembleRelease

    - name: Upload Release APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: gps-tracker-release-${{ steps.version.outputs.VERSION_CODE }}.apk
        path: app/build/outputs/apk/release/app-release.apk

    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION_NAME }}
        name: GPS Tracker v${{ steps.version.outputs.VERSION_NAME }}
        body: |
          ## GPS跟踪器 v${{ steps.version.outputs.VERSION_NAME }}
          
          **构建信息:**
          - 构建时间: ${{ steps.version.outputs.BUILD_DATE }}
          - Git提交: ${{ steps.version.outputs.GIT_COMMIT }}
          - Git分支: ${{ steps.version.outputs.GIT_BRANCH }}
          
          **功能特性:**
          - GPS位置跟踪
          - 智能状态检测（室内/室外/活跃/驾驶）
          - GPX文件生成和导出
          - 后台服务运行
          - 电量优化
          
          **下载链接:**
          - Debug版本: gps-tracker-debug-${{ steps.version.outputs.VERSION_CODE }}.apk
          - Release版本: gps-tracker-release-${{ steps.version.outputs.VERSION_CODE }}.apk
        files: |
          app/build/outputs/apk/debug/app-debug.apk
          app/build/outputs/apk/release/app-release.apk
        draft: false
        prerelease: false

    - name: Generate APK Info
      run: |
        echo "=========================================="
        echo "APK Build completed successfully!"
        echo "=========================================="
        echo "Version Name: ${{ steps.version.outputs.VERSION_NAME }}"
        echo "Version Code: ${{ steps.version.outputs.VERSION_CODE }}"
        echo "Build Date: ${{ steps.version.outputs.BUILD_DATE }}"
        echo "Git Commit: ${{ steps.version.outputs.GIT_COMMIT }}"
        echo "Git Branch: ${{ steps.version.outputs.GIT_BRANCH }}"
        echo "=========================================="
        echo "Debug APK: gps-tracker-debug-${{ steps.version.outputs.VERSION_CODE }}.apk"
        echo "Release APK: gps-tracker-release-${{ steps.version.outputs.VERSION_CODE }}.apk"
        echo "=========================================="
